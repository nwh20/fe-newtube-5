{"version":3,"sources":["components/Item.js","components/List.js","components/Main.js","App.js","serviceWorker.js","index.js","youtube-logo.svg","main-logo.svg"],"names":["Item","video","onVideoSelect","imageUrl","snippet","thumbnails","default","url","onClick","className","alt","src","title","channelTitle","List","props","Items","videos","map","key","etag","Main","videoId","id","App","useState","setVideos","selectedVideo","setSelectedVideo","useEffect","term","getVideo","logo","youtube","window","open","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"qSAmBeA,G,MAhBF,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,cACfC,EAAWF,EAAMG,QAAQC,WAAWC,QAAQC,IAElD,OACC,wBAAIC,QAAS,kBAAMN,EAAcD,KAChC,yBAAKQ,UAAU,uBACd,yBAAKC,IAAI,YAAYC,IAAKR,KAE3B,yBAAKM,UAAU,wBACd,uBAAGA,UAAU,SAASR,EAAMG,QAAQQ,OACpC,uBAAGH,UAAU,WAAWR,EAAMG,QAAQS,kBCK3BC,G,MAdF,SAACC,GACb,IAAMC,EAAQD,EAAME,OAAOC,KAAI,SAACjB,GAC/B,OACC,kBAAC,EAAD,CAAMC,cAAea,EAAMb,cAAeiB,IAAKlB,EAAMmB,KAAMnB,MAAOA,OAIpE,OACC,4BACEe,KCOWK,G,MAjBF,SAAC,GAAa,IAAZpB,EAAW,EAAXA,MACd,IAAKA,EACJ,OAAO,yBAAKQ,UAAU,WAAf,WAGR,IAAMa,EAAUrB,EAAMsB,GAAGD,QACnBf,EAAG,wCAAoCe,GAE7C,OACC,yBAAKb,UAAU,mBACd,yBAAKA,UAAU,uBACd,4BAAQE,IAAKJ,EAAKK,MAAM,a,gDCiCbY,EAxCH,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACPR,EADO,KACCS,EADD,OAE4BD,mBAAS,MAFrC,mBAEPE,EAFO,KAEQC,EAFR,KAgBd,OAZAC,qBAAW,WACP,IACeC,IAOR,WANHC,IAAU,CAACZ,IAFH,0CAEaW,KAAMA,IAAO,SAACb,GAC/BS,EAAUT,GACVW,EAAiBX,EAAO,SAKjC,IAGC,yBAAKR,UAAU,OACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,oBACX,yBAAKE,IAAKqB,IAAMtB,IAAI,YAAYD,UAAU,0BAC1C,yBAAKA,UAAU,4BAAf,KAEI,yBAAKE,IAAKsB,IAASvB,IAAI,eAAeF,QAAS,WAAO0B,OAAOC,KAAK,2BAA4B,eAGtG,kBAAC,EAAD,CAAMlC,MAAO0B,KAGjB,yBAAKlB,UAAU,aACX,yBAAKA,UAAU,oBACX,wEAEJ,kBAAC,EAAD,CAAMP,cAAe,SAAAyB,GAAa,OAAIC,EAAiBD,IAAgBV,OAAQA,OC5B3EmB,QACW,cAA7BF,OAAOG,SAASC,UAEe,UAA7BJ,OAAOG,SAASC,UAEhBJ,OAAOG,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,0C,kBCA3CD,EAAOC,QAAU,IAA0B,wC","file":"static/js/main.53309406.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/Item.scss';\n\nconst Item = ({video, onVideoSelect}) => {\n\tconst imageUrl = video.snippet.thumbnails.default.url;\n\n\treturn (\n\t\t<li onClick={() => onVideoSelect(video)}>\n\t\t\t<div className=\"page-list-video-box\">\n\t\t\t\t<img alt=\"thumbnail\" src={imageUrl} />\n\t\t\t</div>\n\t\t\t<div className=\"page-list-video-info\">\n\t\t\t\t<p className=\"title\">{video.snippet.title}</p>\n\t\t\t\t<p className=\"channel\">{video.snippet.channelTitle}</p>\n\t\t\t</div>\n\t\t</li>\n\t)\n}\n\nexport default Item;","import React from 'react';\nimport Item from './Item';\nimport '../styles/List.scss';\n\nconst List = (props) => {\n\tconst Items = props.videos.map((video) => {\n\t\treturn (\n\t\t\t<Item onVideoSelect={props.onVideoSelect} key={video.etag} video={video} />\n\t\t)\n\t})\n\n\treturn (\n\t\t<ul>\n\t\t\t{Items}\n\t\t</ul>\n\t)\n}\n\nexport default List;","import React from 'react';\nimport '../styles/Main.scss';\n\nconst Main = ({video}) => {\n\tif (!video) {\n\t\treturn <div className=\"loading\">Loading</div>;\n\t}\n\n\tconst videoId = video.id.videoId;\n\tconst url = `https://www.youtube.com/embed/${videoId}`;\n\n\treturn (\n\t\t<div className=\"page-main-video\">\n\t\t\t<div className=\"page-main-video-box\">\n\t\t\t\t<iframe src={url} title=\"main\" />\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Main;","import React, { useState, useEffect } from \"react\";\nimport List from './components/List';\nimport Main from './components/Main';\nimport getVideo from 'youtube-api-search';\nimport youtube from './youtube-logo.svg';\nimport logo from './main-logo.svg';\n\nconst App = () => {\n    const [videos, setVideos] = useState([]);\n    const [selectedVideo, setSelectedVideo] = useState(null);\n    \n    useEffect (() => {\n        const KEY = 'AIzaSyBUdrW8JHPAU-UbdHOprviDHn-PSJa7no4';\n        const Search = term => {\n            getVideo ({key: KEY, term: term}, (videos) => {\n                setVideos(videos);\n                setSelectedVideo(videos[0]);\n            });\n        }\n        \n        Search('frontend');\n    }, [])\n\n    return (\n        <div className=\"App\">\n            <div className=\"page-main\">\n                <div className=\"page-main-banner\">\n                    <img src={logo} alt=\"main-logo\" className=\"page-main-banner-logo\" />\n                    <div className=\"page-main-banner-youtube\">\n                        by \n                        <img src={youtube} alt=\"youtube-logo\" onClick={() => {window.open('https://www.youtube.com/', '_blank');}} />\n                    </div>\n                </div>\n                <Main video={selectedVideo} />\n            </div>\n\n            <div className=\"page-list\">\n                <div className=\"page-list-banner\">\n                    <h3>The 5 New Videos For Frontend Developer</h3>\n                </div>\n                <List onVideoSelect={selectedVideo => setSelectedVideo(selectedVideo)} videos={videos} />\n            </div>\n\n        </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/youtube-logo.89b03ae8.svg\";","module.exports = __webpack_public_path__ + \"static/media/main-logo.dca1e492.svg\";"],"sourceRoot":""}